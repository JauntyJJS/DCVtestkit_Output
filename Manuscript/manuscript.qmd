---
title: "*DCVtestkit*: an R package for analysis of quality control dilution curves"
bibliography: bibliography.bib
csl: bioinfo.csl
format: docx
---

```{r R packages}
#| echo: false
#| message: false

library(dplyr)
library(stringr)
library(here)
library(tibble)
library(ggplot2)
library(gridExtra)
library(patchwork)
library(labelled)
library(gtsummary)
library(flextable)
library(webshot2)
library(DCVtestkit)
```

## Manuscript Type

Application Note

# Abstract

## Summary

In metabolomic and lipidomic workflows, a linear response in dilution series generated from pooled quality control (QC) samples is used to assess the quality of the measurement of molecules measured before further analysis. Most of the currently used software only allow the analyst to repetitively plot, view and analyse the dilution curves one at a time, a tedious and time-consuming process. In addition, summary statistics of dilution curves are limited to the Pearson Correlation Coefficient $R$ and/or Coefficient Of Determination $R^2$, which are insufficient to fully understand the shape of the dilution curves. DCVtestkit aims to provide additional summary statistics for dilution curves, taken from previous publications but which are not implemented in the current software tools. It also helps to reduce the analyst’s workload by analysing many dilution curves automatically, reporting the statistical results in Excel and recording the dilution plots in a pdf file. In addition, it can also create an interactive trellis displayed as a HTML folder for more exploratory analyses.

## Availability and implementation

*DCVtestkit* is available on GitHub <https://github.com/SLINGhub/DCVtestkit>. The documentation and tutorials can be accessed from <https://slinghub.github.io/DCVtestkit/>

## Supplementary information

Supplementary data are available at *Bioinformatics* online.

## Issue Section

Data and text mining

# Introduction

Dilution curves have been used in many areas of biomedical and pharmaceutical sciences. In the field of metabolomics and lipidomics, dilution curves for each molecule measured, usually in a quality control sample generated by pooling equal aliquots from each study sample, are plotted as proposed by @croixmarie2009 to check if the sample matrix is the same among all samples. Molecules that do not show a linear dilution curve can be rejected before further statistical analysis, in spite of their relevance to the study, as their quantitation in different sample groups might be compromised. A cut off Pearson Correlation Coefficient value of $0.8$ is commonly used to balance the risk of accepting or removing signals related to relevant molecules. As such, many laboratories use commercial software to plot these dilution curves and report their corresponding Pearson Correlation Coefficient value. These include either mass spectrometry vendors’ software or, more in general, programs such as Excel and GraphPad Prism. Nevertheless, these tools have limitations.

While the Pearson Correlation Coefficient $R$ and/or Coefficient Of Determination $R^2$ are popular indicators of how well the dilution points fits a linear line, @sonnergaard2006 estimated that these are not effective standalone numeric parameter to estimate linearity. Using a modified version of Anscombe’s quartet, the paper showed that a high coefficient of determination does not reflect well a curve relationship. Both @croixmarie2009 and @sands2021 support this view, by indicating that an obvious non-linear response at the high and/or low ends of the quality control sample-based dilution curve can still yield a high correlation coefficient. This is in agreement with @sanchez2021 findings of several saturated calibration curves with $R$ values greater than $0.995$.

Fortunately, researchers who have studied deeply model validation and misspecification have provided alternative graphical and statistical methods to improve the reliability of linearity assessments. For example, @vanloco2002 highlighted the presence of alternative statistics, such as the Lack-of-fit test and quality coefficient, that can be used to make better judgement on the shape of the dilution curve. While the progress in finding better metrics and algorithms to evaluate the linearity of dilution curves is commendable, these findings are rarely implemented in more general-purpose software.

In addition, with the advancement of the technology used for molecular identification coupled with a high emphasis on high throughput analysis and automation, today’s targeted metabolomics/lipidomics can include more than eight hundred analytes measured by a single method. This number can also increase further in an untargeted approach. In these cases, using general-purpose programs to plot dilution curves for every single molecule may be tedious. Moreover, the reports generated by these programs are static dilution plots coupled with a statistical summary table. Having the analyst to look at five hundred dilution curves individually is time consuming and inefficient for data evaluation.

To address the issues mentioned above, we have created an R package, *DCVtestkit*, to assist analysts, not only to plot these dilution curves for many molecules easily but also providing additional statistical results, other than the Pearson Correlation Coefficient $R$ or coefficient of determination $R^2$, for these curves. These alternative statistical results may be helpful in better describing the shape of the dilution curve. The R package also provides several ways of reporting the dilution data, including an interactive html file. This allows the analyst to group, filter and sort the dilution plots, to only look at the relevant ones, such as the saturated dilution curves, and identify problematic molecules quickly.

# General Workflow

Here, we introduce the workflow used by our R package, *DCVtestkit* in @fig-DCVtestkit-Workflow.

::: {#fig-DCVtestkit-Workflow layout-ncol=1}

![](images/README-Workflow.png)

*DCVtestkit* Workflow
:::

Beginning with the Input Data phase, the workflow starts with two tables: a table (Transition Signal Data) containing transition signals (y-axis for dilution curve) for each sample and a table (Dilution Annotation) containing dilution curve related information for each sample, such as concentration (x-axis for dilution curve) and dilution batches. As, the two tables share the same sample list, it can be merged together into one table (Dilution Table) using the function `create_dilution_table`.

During the Calculation stage of the workflow, the summary statistics are calculated using the function `summarise_dilution_table` for each dilution curve corresponding to a dilution batch and transition. Optionally, analysts can use the function `evaluate_linearity` to group the dilution curves based on the summary statistics. These tabular results can be reported as an Excel sheet using the function `write_summary_excel`.

With the summary statistics results, the workflow can proceed to the Dilution Curve Plotting phase in which static and interactive dilution plots can be created using `add_ggplot_panel` and `add_plotly_panel` respectively. Static plots are output as a pdf file while the interactive plots are output as a HTML folder containing several folders and one `index.html` file. Analysts can view the interactive plots by double clicking on the `index.html` file.

# Statistical Summary for Dilution Curves

@fig-curves gives a plot of three manually curated curves together with their corresponding summary statistics. The characteristic of three curves are as follows: One is a linear curve. Another is having a plateau at higher concentrations, also known as a saturated curve. The last example is a curve with a plateau at lower concentrations or experiencing a limit of detection (denoted as LOD curves in this paper). It can be observed that the corresponding Pearson Correlation Coefficient values, denoted as `r_corr`, are $\ge0.9$ ($0.99$, $0.95$ and $0.98$ respectively) even for the curves that are non-linear. These results are in agreement with @vanloco2002 as well as @logue2018 arguments that the Pearson Correlation Coefficient is a poor descriptor of non-linear calibration curves.

To improve the description of the goodness-of-fit for linear dilution curves, a few additional parameters, on top of the popular Pearson Correlation Coefficient $R$, are added in the R package *DCVtestkit*. The first additional parameters are statistical results from Mandel’s Fitting Test (as reported in @andrade2013) in which a low $p$ value gives sufficient evidence that a quadratic model is a better fit than a linear model, indicating the curve may not be linear. Another parameter calculated is the Percent Residual Accuracy (as reported in @logue2018) which ranges from $-\infty$ to $100$. If the curve is linear, the value should be close to $100$. Finally, the software also fits a quadratic model on the dilution curve and calculates the concavity, trying to verify if the dilution curve is predominantly non-linear at high (concavity $<0$) or low (concavity $>0$) concentrations.

Returning to @fig-curves, both the saturated and LOD curves give a much lower Mandel’s Fitting Test $p$ values, denoted as `mandel_p_val`, ($1.66 * 10^{-4}$ and $2.56 * 10^{-3}$ respectively vs $0.38$). Correspondingly, ranging from $-\infty$ to $100$, the Percent Residual Accuracy values, denoted as `pra_linear`, are much lower in the saturated and LOD curves compared to the linear curve ($62.30$ and $74.69$ respectively vs $94.32$).

```{r Motivation, echo = FALSE}
#| echo: false

linear_data <- data.frame(
  conc_var = c(10, 25, 40, 50, 60,
               75, 80, 100, 125, 150),
  signal_var = c(25463, 63387, 90624, 131274, 138069,
                 205353, 202407, 260205, 292257, 367924)
)

saturated_data <- data.frame(
  conc_var = c(10, 25, 40, 50, 60,
               75, 80, 100, 125, 150),
  signal_var = c(5192648, 16594991, 32507833, 46499896,
                 55388856, 62505210, 62778078, 72158161,
                 78044338, 86158414)
)

lod_data <- data.frame(
  conc_var = c(10, 25, 40, 50, 60,
               75, 80, 100, 125, 150),
  signal_var = c(500, 903, 1267, 2031, 2100,
                 3563, 4500, 5300, 8500, 10430)
)

tabular_display <- tibble::tibble(
  Concentration = c(10, 25, 40, 50, 60,
                    75, 80, 100, 125, 150), 
  `Linear signal` = c(25463, 63387, 90624, 131274, 138069,
                    205353, 202407, 260205, 292257, 367924),
  `Saturated signal` = c(5192648, 16594991, 32507833, 46499896,
                       55388856, 62505210, 62778078, 72158161,
                       78044338, 86158414),
  `LOD signal` = c(500, 903, 1267, 2031, 2100,
                 3563, 4500, 5300, 8500, 10430)
)

concentration_table <- gridExtra::tableGrob(
  d = tabular_display, 
  rows = NULL,
  theme = gridExtra::ttheme_default(
    core=list(fg_params=list(hjust=1, x=0.9))
    )
  ) 
```

```{r create linear plot}
#| echo: false

# Get dilution summary
statistical_summary <- DCVtestkit::summarise_dilution_data(
  linear_data, 
  "conc_var", 
  "signal_var")

table <- DCVtestkit::plot_summary_table(statistical_summary)

# Model the data
linear_model <- DCVtestkit::create_linear_model(linear_data, 
                                                "conc_var", "signal_var")
quad_model <- DCVtestkit::create_quad_model(linear_data, 
                                            "conc_var", "signal_var")

dilution <- seq(min(linear_data$conc_var, na.rm = TRUE),
                max(linear_data$conc_var, na.rm = TRUE),
                length.out = 15)

# Create the y values for the line
y_lin_predict <- stats::predict(linear_model,
                                tibble::tibble("conc_var" := dilution))
y_quad_predict <- stats::predict(quad_model,
                                 tibble::tibble("conc_var" := dilution))
reg_data <- data.frame(
  dilution = dilution,
  y_lin_predict = y_lin_predict,
  y_quad_predict = y_quad_predict
)

reg_col_vec <- c("Lin" = "black", "Quad" = "red")

linear_plot <- ggplot2::ggplot(linear_data) +
  ggplot2::aes(x = .data$conc_var,
               y = .data$signal_var
               ) +
    ggplot2::geom_point(size = 5, colour = "#746ab0") +
  ggplot2::geom_line(data = reg_data,
                           mapping = ggplot2::aes(x = dilution, y=y_lin_predict,
                                                  colour = "Lin")
        ) +
  ggplot2::geom_line(data = reg_data,
                     mapping = ggplot2::aes(x = dilution, y=y_quad_predict,
                                            colour = "Quad")
  ) +
  ggplot2::scale_colour_manual(values = c(reg_col_vec),
                               labels = names(c(reg_col_vec)),
                               guide = ggplot2::guide_legend(override.aes = list(
                                 linetype = c(rep("solid", length(reg_col_vec))),
                                 shape = c(rep(NA, length(reg_col_vec))),
                                 colour = c(reg_col_vec)
                               ))
    ) +
  ggplot2::theme(
    legend.title = ggplot2::element_blank(),
    legend.position = "top",
    axis.title.y = ggplot2::element_text(angle = 0,
                                         vjust = 1)
  ) +
  ggplot2::labs(title = "Linear",
                x = "Concentration",
                y = "Signal")

linear_plot <- patchwork::wrap_plots(linear_plot, table, ncol = 2, nrow = 1)
```

```{r create saturation plot}
#| echo: false

# Get dilution summary
statistical_summary <- DCVtestkit::summarise_dilution_data(
  saturated_data, 
  "conc_var", 
  "signal_var")

table <- DCVtestkit::plot_summary_table(statistical_summary)

# Model the data
linear_model <- DCVtestkit::create_linear_model(saturated_data, 
                                                "conc_var", "signal_var")
quad_model <- DCVtestkit::create_quad_model(saturated_data, 
                                            "conc_var", "signal_var")

dilution <- seq(min(saturated_data$conc_var, na.rm = TRUE),
                max(saturated_data$conc_var, na.rm = TRUE),
                length.out = 15)

# Create the y values for the line
y_lin_predict <- stats::predict(linear_model,
                                tibble::tibble("conc_var" := dilution))
y_quad_predict <- stats::predict(quad_model,
                                 tibble::tibble("conc_var" := dilution))
reg_data <- data.frame(
  dilution = dilution,
  y_lin_predict = y_lin_predict,
  y_quad_predict = y_quad_predict
)

reg_col_vec <- c("Lin" = "black", "Quad" = "red")

saturation_plot <- ggplot2::ggplot(saturated_data) +
  ggplot2::aes(x = .data$conc_var,
               y = .data$signal_var
               ) +
    ggplot2::geom_point(size = 5, colour = "#377eb8") +
  ggplot2::geom_line(data = reg_data,
                           mapping = ggplot2::aes(x = dilution, y=y_lin_predict,
                                                  colour = "Lin")
        ) +
  ggplot2::geom_line(data = reg_data,
                     mapping = ggplot2::aes(x = dilution, y=y_quad_predict,
                                            colour = "Quad")
  ) +
  ggplot2::scale_colour_manual(values = c(reg_col_vec),
                               labels = names(c(reg_col_vec)),
                               guide = ggplot2::guide_legend(override.aes = list(
                                 linetype = c(rep("solid", length(reg_col_vec))),
                                 shape = c(rep(NA, length(reg_col_vec))),
                                 colour = c(reg_col_vec)
                               ))
    ) +
  ggplot2::theme(
    legend.title = ggplot2::element_blank(),
    legend.position = "top",
    axis.title.y = ggplot2::element_text(angle = 0,
                                         vjust = 1)
  ) +
  ggplot2::labs(title = "Saturation",
                x = "Concentration",
                y = "Signal")

saturation_plot <- patchwork::wrap_plots(saturation_plot, table, ncol = 2, nrow = 1)
```

```{r create lod plot}
#| echo: false

# Get dilution summary
statistical_summary <- DCVtestkit::summarise_dilution_data(
  lod_data, 
  "conc_var", 
  "signal_var")

table <- DCVtestkit::plot_summary_table(statistical_summary)

# Model the data
linear_model <- DCVtestkit::create_linear_model(lod_data, 
                                                "conc_var", "signal_var")
quad_model <- DCVtestkit::create_quad_model(lod_data, 
                                            "conc_var", "signal_var")

dilution <- seq(min(lod_data$conc_var, na.rm = TRUE),
                max(lod_data$conc_var, na.rm = TRUE),
                length.out = 15)

# Create the y values for the line
y_lin_predict <- stats::predict(linear_model,
                                tibble::tibble("conc_var" := dilution))
y_quad_predict <- stats::predict(quad_model,
                                 tibble::tibble("conc_var" := dilution))
reg_data <- data.frame(
  dilution = dilution,
  y_lin_predict = y_lin_predict,
  y_quad_predict = y_quad_predict
)

reg_col_vec <- c("Lin" = "black", "Quad" = "red")

lod_plot <- ggplot2::ggplot(lod_data) +
  ggplot2::aes(x = .data$conc_var,
               y = .data$signal_var
               ) +
    ggplot2::geom_point(size = 5, colour = "#4daf4a") +
  ggplot2::geom_line(data = reg_data,
                           mapping = ggplot2::aes(x = dilution, y=y_lin_predict,
                                                  colour = "Lin")
        ) +
  ggplot2::geom_line(data = reg_data,
                     mapping = ggplot2::aes(x = dilution, y=y_quad_predict,
                                            colour = "Quad")
  ) +
  ggplot2::scale_colour_manual(values = c(reg_col_vec),
                               labels = names(c(reg_col_vec)),
                               guide = ggplot2::guide_legend(override.aes = list(
                                 linetype = c(rep("solid", length(reg_col_vec))),
                                 shape = c(rep(NA, length(reg_col_vec))),
                                 colour = c(reg_col_vec)
                               ))
    ) +
  ggplot2::theme(
    legend.title = ggplot2::element_blank(),
    legend.position = "top",
    axis.title.y = ggplot2::element_text(angle = 0,
                                         vjust = 1)
  ) +
  ggplot2::labs(title = "LOD",
                x = "Concentration",
                y = "Signal")

lod_plot <- patchwork::wrap_plots(lod_plot, table, ncol = 2, nrow = 1)
```

```{r ViewMotivationData1}
#| echo: false
#| label: fig-curves
#| fig-height: 9
#| fig-width: 13
#| fig-cap: "Plots and statistical results of three curves: Linear curve, Saturated curve and a curve with Limit Of Detection (LOD)"


patchwork::wrap_plots(
  concentration_table, 
  linear_plot, 
  saturation_plot, 
  lod_plot, 
  ncol = 2, 
  nrow = 2
)
```

# Dilution Curve Grouping

*DCVtestkit* uses the function `evaluate_linearity` to group the dilution curves. At this moment, two workflows are proposed. Workflow $1$ uses both the Pearson Correlation Coefficient and Percent Residual Accuracy to determine if the dilution curve is linear (labelled as Good Linearity) or not (labelled as Poor Linearity). Workflow $2$ goes one step further by using the Mandel’s Fitting Test and the concavity of the fitted quadratic model to check if the non-linear dilution curve plateaus at low concentrations (labelling them as limit of detection) or high concentrations (labelling them as saturation). Non-linear dilution curves that do not follow these trends are then labelled as Poor Linearity.

::: {#fig-Dilution-Grouping-Workflow layout-ncol=1}

![](images/README-LinearEvaluation.png)

Dilution Curve Grouping Workflows
:::

```{r Load Simulated Data Results}
#| echo: false
saturation_dilution_summary <-
  readRDS(file = here::here(
    "Quarto_Simulation",
    "saturation_dilution_summary.rds")
)

lod_dilution_summary <-
  readRDS(file = here::here(
    "Quarto_Simulation",
    "lod_dilution_summary.rds")
)

linear_dilution_summary <-
  readRDS(file = here::here(
    "Quarto_Simulation",
    "linear_dilution_summary.rds")
)
```

```{r Combine Simulated Data Results}
#| echo: false
saturation_dilution_summary <- saturation_dilution_summary |> 
  dplyr::mutate(curve_group = "Saturated")

lod_dilution_summary <- lod_dilution_summary |> 
  dplyr::mutate(curve_group = "Limit of Detection")

linear_dilution_summary <- linear_dilution_summary |> 
  dplyr::mutate(curve_group = "Linear")

combined_dilution_summary <-
  dplyr::bind_rows(
    saturation_dilution_summary,
    lod_dilution_summary,
    linear_dilution_summary
  ) 
```

```{r Data Wrangling for Simulation Results}
#| echo: false
combined_dilution_summary <- 
  combined_dilution_summary |> 
  dplyr::mutate(
    curve_group = factor(.data$curve_group,
                         levels = c("Linear",
                                    "Saturated",
                                    "Limit of Detection")),
    pearson_group = dplyr::case_when(
      .data$r_corr >= 0.8 ~ "more than or\nequal to 0.8",
      .data$r_corr < 0.8 ~ "less than 0.8",
    ),
    wf2_group = stringr::str_replace(
      string = .data$wf2_group,
      pattern = "LOD",
      replacement = "Limit of Detection"
    ),
    wf2_group = factor(.data$wf2_group,
                         levels = c("Good Linearity",
                                    "Saturation",
                                    "Limit of Detection",
                                    "Poor Linearity"))
  ) |> 
  labelled::set_variable_labels(
    ID = "Unique Curve Identifier",
    curve_group = "Simulated Curve Group",
    wf1_group = "Workflow 1 Grouping",
    wf2_group = "Workflow 2 Grouping",
    pearson_group = "Pearson Correlation\nCoefficient Grouping",
    r_corr = "Pearson Correlation\nCoefficient",
    pra_linear = "Percent Residual\nAccuracy",
    mandel_p_val = "Mandel's Test p Value",
    concavity = "Concavity Of Fitted Quadratic Model",
    r2_linear = "Coefficient Of Determination",
    r2_adj_linear = "Adjusted Coefficient Of Determination",
    mandel_stats = "Test statistics from Mandel's Test"
  )

```

Workflow $2$ was tested on `r nrow(linear_dilution_summary)` simulated linear curves (labelled as Linear), `r nrow(lod_dilution_summary)` curves that plateau at low concentrations (labelled as Limit of Detection) and `r nrow(saturation_dilution_summary)` curves that plateau at high concentrations (labelled as Saturated). A benchmark workflow using only Pearson Correlation Coefficient with a cut off value of $0.8$ is used to compare with Workflow $2$.

```{r}
#| echo: false
#| output: false
simulation_results <- combined_dilution_summary |> 
  dplyr::select(c("curve_group", "wf2_group", 
                  "pearson_group"
                  # "r_corr", "pra_linear"
                  )
                ) |> 
  dplyr::relocate(c("pearson_group")) |> 
  gtsummary::tbl_summary(
    by = "curve_group",
    statistic = list(
      pearson_group ~ "{n}/{N} ({p}%)",
      wf2_group ~ "{n}/{N} ({p}%)"
    ),
    digits = list(
      wf2_group ~ c(0, 0, 1),
      pearson_group ~ c(0, 0, 1)
      #r_corr ~ c(2),
      #pra_linear ~ c(0)
      )
  ) |> 
  modify_header(
    all_stat_cols() ~ "**{level}**\nN = {n}"
    ) |> 
  gtsummary::modify_spanning_header(
    all_stat_cols() ~ "**Simulated Curve Type**"
    )


simulation_results |> 
  gtsummary::as_flex_table() |> 
  flextable::set_table_properties(width = 1, layout = "autofit") |>
  flextable::save_as_image(
    path = here::here("Manuscript",
                      "images",
                      "simulation_results.png"), 
    webshot = "webshot2")
```

::: {#fig-Simulation-Result layout-ncol=1}

![](images/simulation_results.png)

Simulation Results
:::

@fig-Simulation-Result showed that Workflow $2$ is able to identify the saturated and limit of detection curves better than the benchmark workflow. On the other hand, while Workflow $2$ is able to identify less linear curves than the benchmark workflow, the results are comparable score of `r inline_text(simulation_results, variable = wf2_group, level = "Good Linearity", column = "Linear")` 

While the proposed workflows' threshold values of Pearson Correlation Coefficient and Percent Residual Accuracy are based on the interpretation given by @y.h.chan2003 and @logue2018, respectively, these cut off values remain subjective and arbitrary. Moreover, it is also possible for the dilution curve to exhibit a sigmoidal relationship, or non-linear, at both low and high concentrations, which the proposed workflow would be unable to identify.

Nevertheless, while the proposed workflow is not a perfect solution, *DCVtestkit* allows the analyst to change and optimise the threshold values, to adjust the determinants of linearity and saturation of dilution curves according to the user’s needs. More information on how to perform such customisation can be found in the program documentation titled: ["Customise Linearity Evaluation Workflow"](https://slinghub.github.io/DCVtestkit/articles/lineval-customization.html). Furthermore, it is also possible to output these statistical summaries in Excel without the classification results.

# Results Distribution

Lastly, *DCVtestkit* can export the statistical results of each dilution curve in Excel. Furthermore, it can report the list of dilution plots as static charts with the statistical summary results included in a single pdf file.

As some may find the final pdf file too complex for further interpretation, the R package also provides an interactive viewer, as a HTML folder, to look at dilution plots in a trellis display framework, as introduced in @becker1996. Clicking on the `index.html` file inside the folder will open the interactive viewer that allows the user to group, filter and sort these trellis charts in a meaningful way, based on @hafen2013's definition of "cognostics" or computer guiding diagnostics. This allows the user to do exploratory data analysis, such as identifying groups of molecules with linearity issues or finding out the effects of changing the Pearson Correlation Coefficient to another value. Such tasks can be challenging and time consuming if only the Excel and pdf files full of static plots were provided.

::: {#fig-Viewing-Interactive-Curves layout-ncol=1}

![](images/README-TrellisOutput.png)

Viewing Several Interactive Dilution Curves
:::

An example of an interactive viewer created by *DCVtestkit* can be accessed from <https://dcvtestkit-interactive-example.netlify.app/>. Such interactive visualisation was also utilised by @hafen2019 in the exploration of proteomics, metabolomics and lipidomics data in a multi-omics approach. The HTML folder can be compressed as a zip file and shared as a pdf or Excel file. This interactive viewer can also be displayed as a report created from Quarto (https://quarto.org/), an open-source scientific and technical publishing system. The report can be viewed at <https://dcvtestkit-quarto-example.netlify.app/>
R script and result outputs can be found in the Supplementary Material or by accessing this GitHub page <https://github.com/JauntyJJS/DCVtestkit_Output>


An example of an interactive viewer created by *DCVtestkit* can be accessed from <https://dcvtestkit-interactive-example.netlify.app/>. Such interactive visualisation was also utilised by @hafen2019 in the exploration of proteomics, metabolomics, and lipidomics data in a multi-omics fashion. The HTML folder can be compressed as a zip file and distributed to others like a pdf or Excel file. This interactive viewer can also be displayed in as a report created from Quarto (<https://quarto.org/>), an open-source scientific and technical publishing system. The report can be viewed at <https://dcvtestkit-quarto-example.netlify.app/>. R script and result outputs can be found in the Supplementary Material or by accessing this GitHub page <https://github.com/JauntyJJS/DCVtestkit_Output>.

# Conclusion

A linear response in quality control dilution curves is one of the requirements in metabolomics and lipidomics to assess the suitability of the molecules measured for further analysis. Despite its importance in testing data quality, the shortage of software tools to analyse dilution curves effectively and efficiently prevents researchers from fully analysing data. An R package called *DCVtestkit* is created to rectify this issue by allowing many dilution curves to be analysed quickly and reliably. This is done by the use of alternative statistics, other than the Pearson Correlation Coefficient, to better understand the linearity of the dilution curves, as well as reporting of statistical results and dilution plots that can be distributed to others. It is also able to provide an interactive trellis plot for exploratory data analysis. The R package is available on GitHub <https://github.com/SLINGhub/DCVtestkit> while the documentation and tutorials can be accessed from <https://slinghub.github.io/DCVtestkit/>. As *DCVtestkit* is an opensource software, it is accessible to collaboration works which can help improve its usability and performance in the future.

# Acknowledgements

These should be included at the end of the text and not in footnotes. Please ensure you acknowledge all sources of funding, see funding section below.

Details of all funding sources for the work in question should be given in a separate section entitled 'Funding'. This should appear before the 'Acknowledgements' section.

# Funding

The following rules should be followed:

-   The sentence should begin: 'This work was supported by ...' -
-   The full official funding agency name should be given, i.e. 'National Institutes of Health', not 'NIH' (full RIN-approved list of UK funding agencies)
-   Grant numbers should be given in brackets as follows: '\[grant number xxxx\]'
-   Multiple grant numbers should be separated by a comma as follows: '\[grant numbers xxxx, yyyy\]'
-   Agencies should be separated by a semi-colon (plus 'and' before the last funding agency)
-   Where individuals need to be specified for certain sources of funding the following text should be added after the relevant agency or grant number 'to \[author initials\]'.

An example is given here: 'This work was supported by the National Institutes of Health \[AA123456 to C.S., BB765432 to M.H.\]; and the Alcohol & Education Research Council \[hfygr667789\].'

Oxford Journals will deposit all NIH-funded articles in PubMed Central. See Depositing articles in repositories -- information for authors for details. Authors must ensure that manuscripts are clearly indicated as NIH-funded using the guidelines above.

# References
