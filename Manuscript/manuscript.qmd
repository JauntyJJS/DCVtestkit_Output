---
title: "*DCVtestkit*: an R package for analysis of quality control dilution curves"
bibliography: bibliography.bib
csl: bioinfo.csl
format: docx
---

## Manuscript Type

Application Note

# Abstract

## Summary

In metabolomic and lipidomic workflows, a linear response in dilution series generated from pooled quality control (QC) samples is used to assess the quality of the measurement of molecules measured before further analysis. Most of the currently used software only allow the analyst to repetitively plot, view and analyse the dilution curves one at a time, a tedious and time-consuming process. In addition, summary statistics of dilution curves are limited to the Pearson Correlation Coefficient $R$ and/or Coefficient Of Determination $R^2$, which are insufficient to fully understand the shape of the dilution curves. DCVtestkit aims to provide additional summary statistics for dilution curves, taken from previous publications but which are not implemented in the current software tools. It also helps to reduce the analystâ€™s workload by analysing many dilution curves automatically, reporting the statistical results in Excel and recording the dilution plots in a pdf file. In addition, it can also create an interactive trellis displayed as a HTML folder for more exploratory analyses.

## Availability and implementation

`DCVtestkit` is available on GitHub <https://github.com/SLINGhub/DCVtestkit>. The documentation and tutorials can be accessed from <https://slinghub.github.io/DCVtestkit/>

## Supplementary information

Supplementary data are available at *Bioinformatics* online.

## Issue Section

Data and text mining

# Introduction

Dilution curves have been used in many areas of biomedical and pharmaceutical sciences. In the field of metabolomics and lipidomics, quality control dilution curves for each molecule are plotted, as proposed by @croixmarie2009 to check if the sample matrix is the same among all samples. Molecules that do not have a linear relationship are rejected in spite of its relevance to the study. A cut off Pearson Correlation Coefficient value of $0.8$ was used to balance the risk of accepting spurious signals and removing signals related to important molecules. As such, many laboratories use commercial software to plot these dilution curves and report their corresponding off Pearson Correlation Coefficient value. These includes general purpose programs such as Excel and GraphPad Prism. Nevertheless, these general-purpose tools have their limitations.

While the Pearson Correlation Coefficient $R$ and/or Coefficient Of Determination $R^2$ are popular indicators of how well the dilution points fits a linear line, @sonnergaard2006 assets that these are not effective standalone numeric parameter to linearity. Using a modified version of Anscombe's quartet, the paper showed that a high coefficient of determination does not reflect a curve relationship well. Both @croixmarie2009 and @sands2021 support this view by indicating that an obvious non-linear response at the high and/or low ends of the diluted quality control sample dilution curve can still yield a high correlation coefficient. This is in agreement with @sanchez2021 findings of several saturated calibration curves with a $R$ value greater than $0.995$.

Fortunately, researcher who have studied deeply on model validation and misspecification have provided alternative graphical and statistical methods to improve the reliability of linearity assessment. For example, @vanloco2002 shared the presence of alternative statistics such as the Lack-of-fit test and quality coefficient that can be used to make better judgement on the shape of the dilution curve. While the progress in finding better metrics and algorithms to evaluate the linearity of dilution curve is commendable, these findings are rarely implemented in many general-purpose software.

In addition, with the advancement of technology in molecular identification coupled with a high emphasis on high throughput analysis and automation, today's targeted meatbolomics/lipidomics analysis can go as high as five hundred molecules being measured. This number can increase further in an untargeted approach. Using general-purpose programs to plot dilution curves for every single molecule may be tedious. Moreover, the report generated by these programs are static dilution plots coupled with statistical summary table. Having the analyst to look at five hundred dilution curves individually is time consuming and inefficient in understanding the data.

To address the issues mentioned above, we have created an R package, `DCVtestkit`, to assist analysts, not only to plot these dilution curves for many molecules easily, but also provided additional statistical results, other than the Pearson Correlation Coefficient $R$ or coefficient of determination $R^2$, for these curves. These alternative statistical results may be helpful in describing the shape the dilution curve possess. The R package also provide several ways of reporting the dilution data, including one as an interactive html file. This allows the analyst to group, filter and sort the dilution plots, to only look at the relevant ones, like saturated dilution curves, and identify problematic molecules quickly.

# General Workflow

Here, we introduce the workflow in which R package, `DCVtestkit`, follows.

![DCVtestkit Workflow](images/README-Workflow.png)

Beginning with the Input Data phase, the workflow starts with two tables: a table (Transition Signal Data) containing transition signals (y-axis for dilution curve) for each sample and a table (Dilution Annotation) containing dilution curve related information for each sample, such as concentration (x-axis for dilution curve) and dilution batches. As, the two tables share the same sample list, it can be merged together into one table (Dilution Table) using the function `create_dilution_table`.

During the Calculation stage of the workflow, the summary statistics are calculated using the function `summarise_dilution_table` for each dilution curve corresponding to a dilution batch and transition. Optionally, analysts can use the function `evaluate_linearity` to group the dilution curves based on the summary statistics. These tabular results can be reported as an Excel sheet using the function `write_summary_excel`.

With the summary statistics results, the workflow can proceed to the Dilution Curve Plotting phase in which static and interactive dilution plots can be created using `add_ggplot_panel` and `add_plotly_panel` respectively. Static plots are output as a pdf file while the interactive plots are output as a HTML folder containing several folders and one `index.html` file. Analysts can view the interactive plots by double clicking on the `index.html` file.

# Statistical Summary for Dilution Curves

To address the paucity of parameters describing the goodness-of-fit of linear dilution curves, a few additional parameters are added in the R package `DCVtestkit`, on top of the popular Pearson Correlation Coefficient $R$ on a linear regression fit. Currently, the additional parameters are statistical results from Mandel's Fitting Test in @andrade2013 and the Percent Residual Accuracy in @logue2018. The software also fits a quadratic model on the dilution curve and calculates the concavity of the quadratic model to identify to verify if the dilution curve is predominantly non-linear at high or low concentrations.

Given an example linear curve, saturated curve and a curve with limit of detection (LOD) and their corresponding summary statistics, it can be observed that the corresponding Pearson Correlation Coefficient `r_corr` are really high $\ge0.9$ even for the curves that are non-linear. On the other hand, both the saturated and LOD curves give a much lower Mandel's Fitting Test p values `mandel_p_val` and Percent Residual Accuracy `pra_linear` values than the linear curve.

```{r Motivation, echo = FALSE}
linear_data <- data.frame(
  conc_var = c(10, 25, 40, 50, 60,
               75, 80, 100, 125, 150),
  signal_var = c(25463, 63387, 90624, 131274, 138069,
                 205353, 202407, 260205, 292257, 367924)
)

saturated_data <- data.frame(
  conc_var = c(10, 25, 40, 50, 60,
               75, 80, 100, 125, 150),
  signal_var = c(5192648, 16594991, 32507833, 46499896,
                 55388856, 62505210, 62778078, 72158161,
                 78044338, 86158414)
)

lod_data <- data.frame(
  conc_var = c(10, 25, 40, 50, 60,
               75, 80, 100, 125, 150),
  signal_var = c(500, 903, 1267, 2031, 2100,
                 3563, 4500, 5300, 8500, 10430)
)

tabular_display <- tibble::tibble(
  Concentration = c(10, 25, 40, 50, 60,
                    75, 80, 100, 125, 150), 
  `Linear\nsignal` = c(25463, 63387, 90624, 131274, 138069,
                    205353, 202407, 260205, 292257, 367924),
  `Saturated\nsignal` = c(5192648, 16594991, 32507833, 46499896,
                       55388856, 62505210, 62778078, 72158161,
                       78044338, 86158414),
  `Lod\nsignal` = c(500, 903, 1267, 2031, 2100,
                 3563, 4500, 5300, 8500, 10430)
)

concentration_table <- gridExtra::tableGrob(
  d = tabular_display, 
  rows = NULL,
  theme = gridExtra::ttheme_default(
    core=list(fg_params=list(hjust=1, x=0.9))
    )
  ) 
```

```{r create linear plot, echo = FALSE}
# Get dilution summary
statistical_summary <- DCVtestkit::summarise_dilution_data(
  linear_data, 
  "conc_var", 
  "signal_var")

table <- DCVtestkit::plot_summary_table(statistical_summary)

# Model the data
linear_model <- DCVtestkit::create_linear_model(linear_data, 
                                                "conc_var", "signal_var")
quad_model <- DCVtestkit::create_quad_model(linear_data, 
                                            "conc_var", "signal_var")

dilution <- seq(min(linear_data$conc_var, na.rm = TRUE),
                max(linear_data$conc_var, na.rm = TRUE),
                length.out = 15)

# Create the y values for the line
y_lin_predict <- stats::predict(linear_model,
                                tibble::tibble("conc_var" := dilution))
y_quad_predict <- stats::predict(quad_model,
                                 tibble::tibble("conc_var" := dilution))
reg_data <- data.frame(
  dilution = dilution,
  y_lin_predict = y_lin_predict,
  y_quad_predict = y_quad_predict
)

reg_col_vec <- c("Lin" = "black", "Quad" = "red")

linear_plot <- ggplot2::ggplot(linear_data) +
  ggplot2::aes(x = .data$conc_var,
               y = .data$signal_var
               ) +
    ggplot2::geom_point(size = 5, colour = "#746ab0") +
  ggplot2::geom_line(data = reg_data,
                           mapping = ggplot2::aes(x = dilution, y=y_lin_predict,
                                                  colour = "Lin")
        ) +
  ggplot2::geom_line(data = reg_data,
                     mapping = ggplot2::aes(x = dilution, y=y_quad_predict,
                                            colour = "Quad")
  ) +
  ggplot2::scale_colour_manual(values = c(reg_col_vec),
                               labels = names(c(reg_col_vec)),
                               guide = ggplot2::guide_legend(override.aes = list(
                                 linetype = c(rep("solid", length(reg_col_vec))),
                                 shape = c(rep(NA, length(reg_col_vec))),
                                 colour = c(reg_col_vec)
                               ))
    ) +
  ggplot2::theme(
    legend.title = ggplot2::element_blank(),
    legend.position = "top",
    axis.title.y = ggplot2::element_text(angle = 0,
                                         vjust = 1)
  ) +
  ggplot2::labs(title = "Linear",
                x = "Concentration",
                y = "Signal")

linear_plot <- patchwork::wrap_plots(linear_plot, table, ncol = 2, nrow = 1)
```

```{r create saturation plot, echo = FALSE}
# Get dilution summary
statistical_summary <- DCVtestkit::summarise_dilution_data(
  saturated_data, 
  "conc_var", 
  "signal_var")

table <- DCVtestkit::plot_summary_table(statistical_summary)

# Model the data
linear_model <- DCVtestkit::create_linear_model(saturated_data, 
                                                "conc_var", "signal_var")
quad_model <- DCVtestkit::create_quad_model(saturated_data, 
                                            "conc_var", "signal_var")

dilution <- seq(min(saturated_data$conc_var, na.rm = TRUE),
                max(saturated_data$conc_var, na.rm = TRUE),
                length.out = 15)

# Create the y values for the line
y_lin_predict <- stats::predict(linear_model,
                                tibble::tibble("conc_var" := dilution))
y_quad_predict <- stats::predict(quad_model,
                                 tibble::tibble("conc_var" := dilution))
reg_data <- data.frame(
  dilution = dilution,
  y_lin_predict = y_lin_predict,
  y_quad_predict = y_quad_predict
)

reg_col_vec <- c("Lin" = "black", "Quad" = "red")

saturation_plot <- ggplot2::ggplot(saturated_data) +
  ggplot2::aes(x = .data$conc_var,
               y = .data$signal_var
               ) +
    ggplot2::geom_point(size = 5, colour = "#377eb8") +
  ggplot2::geom_line(data = reg_data,
                           mapping = ggplot2::aes(x = dilution, y=y_lin_predict,
                                                  colour = "Lin")
        ) +
  ggplot2::geom_line(data = reg_data,
                     mapping = ggplot2::aes(x = dilution, y=y_quad_predict,
                                            colour = "Quad")
  ) +
  ggplot2::scale_colour_manual(values = c(reg_col_vec),
                               labels = names(c(reg_col_vec)),
                               guide = ggplot2::guide_legend(override.aes = list(
                                 linetype = c(rep("solid", length(reg_col_vec))),
                                 shape = c(rep(NA, length(reg_col_vec))),
                                 colour = c(reg_col_vec)
                               ))
    ) +
  ggplot2::theme(
    legend.title = ggplot2::element_blank(),
    legend.position = "top",
    axis.title.y = ggplot2::element_text(angle = 0,
                                         vjust = 1)
  ) +
  ggplot2::labs(title = "Saturation",
                x = "Concentration",
                y = "Signal")

saturation_plot <- patchwork::wrap_plots(saturation_plot, table, ncol = 2, nrow = 1)
```

```{r create lod plot, echo = FALSE}
# Get dilution summary
statistical_summary <- DCVtestkit::summarise_dilution_data(
  lod_data, 
  "conc_var", 
  "signal_var")

table <- DCVtestkit::plot_summary_table(statistical_summary)

# Model the data
linear_model <- DCVtestkit::create_linear_model(lod_data, 
                                                "conc_var", "signal_var")
quad_model <- DCVtestkit::create_quad_model(lod_data, 
                                            "conc_var", "signal_var")

dilution <- seq(min(lod_data$conc_var, na.rm = TRUE),
                max(lod_data$conc_var, na.rm = TRUE),
                length.out = 15)

# Create the y values for the line
y_lin_predict <- stats::predict(linear_model,
                                tibble::tibble("conc_var" := dilution))
y_quad_predict <- stats::predict(quad_model,
                                 tibble::tibble("conc_var" := dilution))
reg_data <- data.frame(
  dilution = dilution,
  y_lin_predict = y_lin_predict,
  y_quad_predict = y_quad_predict
)

reg_col_vec <- c("Lin" = "black", "Quad" = "red")

lod_plot <- ggplot2::ggplot(lod_data) +
  ggplot2::aes(x = .data$conc_var,
               y = .data$signal_var
               ) +
    ggplot2::geom_point(size = 5, colour = "#4daf4a") +
  ggplot2::geom_line(data = reg_data,
                           mapping = ggplot2::aes(x = dilution, y=y_lin_predict,
                                                  colour = "Lin")
        ) +
  ggplot2::geom_line(data = reg_data,
                     mapping = ggplot2::aes(x = dilution, y=y_quad_predict,
                                            colour = "Quad")
  ) +
  ggplot2::scale_colour_manual(values = c(reg_col_vec),
                               labels = names(c(reg_col_vec)),
                               guide = ggplot2::guide_legend(override.aes = list(
                                 linetype = c(rep("solid", length(reg_col_vec))),
                                 shape = c(rep(NA, length(reg_col_vec))),
                                 colour = c(reg_col_vec)
                               ))
    ) +
  ggplot2::theme(
    legend.title = ggplot2::element_blank(),
    legend.position = "top",
    axis.title.y = ggplot2::element_text(angle = 0,
                                         vjust = 1)
  ) +
  ggplot2::labs(title = "LOD",
                x = "Concentration",
                y = "Signal")

lod_plot <- patchwork::wrap_plots(lod_plot, table, ncol = 2, nrow = 1)
```

```{r ViewMotivationData1, echo = FALSE, fig.height=9, fig.width=13, fig.cap = "Plots and statistical results of three curves: Linear curve, Saturated curve and a curve with Limit Of Detection (LOD)"}
patchwork::wrap_plots(concentration_table, linear_plot, saturation_plot, lod_plot, ncol = 2, nrow = 2)
```

The Mandel's Fitting Test and Percent Residual Accuracy findings are also in agreement with the results from @vanloco2002 and @logue2018 respectively, highlighting that these two alternative parameters are more sensitive and advantageous than the Pearson Correlation Coefficient in their calibration curves and simulated experiments.

# Dilution Curve Grouping

`DCVtestkit` uses the function `evaluate_linearity` to group the dilution curves. At this moment, two workflows are proposed.

![Dilution Curve Grouping Workflow](images/README-LinearEvaluation.png)

While the threshold values given for Pearson Correlation Coefficient and Percent Residual Accuracy are based on @y.h.chan2003 and @logue2018 interpretation respectfully, it remains subjective and arbitrary. Moreover, it is also possible for the dilution curve to exhibit a sigmoidal relationship, or non-linear at both low and high concentrations, which the proposed workflow is unable to identify.

Nevertheless, while the proposed workflow is not infallible, `DCVtestkit` allows the analyst to change and optimise these threshold values to suit the congruency of the analyst's opinion about linearity and saturation of dilution curves. More information on how to perform such customisation can be found in the program documentation titled: ["Customise Linearity Evaluation Workflow"](https://slinghub.github.io/DCVtestkit/articles/lineval-customization.html) Furthermore, it is also possible to output these statistical summaries in Excel without the classification results.

# Results Distribution

Lastly, `DCVtestkit` is able export the statistical results of each dilution curve in Excel. Furthermore, it can report the list of dilution plots as static charts with statistical summary results on the side in a single pdf file.

As some may find a pdf file to be too complex for further interpretation, the R package also provides an interactive viewer as a HTML folder to look at dilution plots in a trellis display framework, as introduced in @becker1996. Clicking on the `index.html` file inside the folder will open the interactive viewer that allows the analysts to group, filter and sort these trellis charts in a meaningful way based using @hafen2013 definition of "cognostics" or computer guiding diagnostics. This provides the analysts to be able to do exploratory data analysis such as identifying groups of molecules with linearity issues or finding out the effects of changing the Pearson Correlation Coefficient to another value. Such tasks can be challenging and time consuming if only the Excel and pdf files full of static plots are provided.

![Viewing Several Interactive Dilution Curves](images/README-TrellisOutput.png)

An example of an interactive viewer created by `DCVtestkit` can be accessed from <https://dcvtestkit-interactive-example.netlify.app/>. Such interactive visualisation was also utilised by @hafen2019 in the exploration of proteomics, metabolomics, and lipidomics data in a multi-omics fashion. The HTML folder can be compressed as a zip file and distributed to others like a pdf or Excel file. This interactive viewer can also be displayed in as a report created from Quarto (https://quarto.org/), an open-source scientific and technical publishing system. The report can be viewed at <https://dcvtestkit-quarto-example.netlify.app/>

R script and result outputs can be found in the Supplementary Material or by accessing this GitHub page <https://github.com/JauntyJJS/DCVtestkit_Output>

# Conclusion

A linear response in quality control dilution curves is one of the many checks used in metabolomics and lipidomics to assess the suitability of the molecules measured for further analysis. Despite its importance in providing high quality data, the shortage of software tools to analyse many dilution curves effectively and efficiently prevents researchers from doing it. An R package called `DCVtestkit` is created to rectify this issue by allowing many dilution curves to be analysed quickly and reliably. This is done by the use of alternative statistics, other than the Pearson Correlation Coefficient, to better understand the linearity of the dilution curves as well as reporting of statistical results and dilution plots that can be distributed to others. It is also able to provide an interactive trellis plot for exploratory data analysis. The R package is available on GitHub <https://github.com/SLINGhub/DCVtestkit> while the documentation and tutorials can be accessed from <https://slinghub.github.io/DCVtestkit/>. As `DCVtestkit` is an opensource software, it is accessible to collaboration works which can help improve its usability and performance in the future.

# Acknowledgements

These should be included at the end of the text and not in footnotes. Please ensure you acknowledge all sources of funding, see funding section below.

Details of all funding sources for the work in question should be given in a separate section entitled 'Funding'. This should appear before the 'Acknowledgements' section.

# Funding

The following rules should be followed:

-   The sentence should begin: 'This work was supported by ...' -
-   The full official funding agency name should be given, i.e. 'National Institutes of Health', not 'NIH' (full RIN-approved list of UK funding agencies)
-   Grant numbers should be given in brackets as follows: '\[grant number xxxx\]'
-   Multiple grant numbers should be separated by a comma as follows: '\[grant numbers xxxx, yyyy\]'
-   Agencies should be separated by a semi-colon (plus 'and' before the last funding agency)
-   Where individuals need to be specified for certain sources of funding the following text should be added after the relevant agency or grant number 'to \[author initials\]'.

An example is given here: 'This work was supported by the National Institutes of Health \[AA123456 to C.S., BB765432 to M.H.\]; and the Alcohol & Education Research Council \[hfygr667789\].'

Oxford Journals will deposit all NIH-funded articles in PubMed Central. See Depositing articles in repositories -- information for authors for details. Authors must ensure that manuscripts are clearly indicated as NIH-funded using the guidelines above.

# References
