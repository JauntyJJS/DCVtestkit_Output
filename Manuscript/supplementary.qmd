---
title: "Supplementary for *lancer*: a R package for linearity assessment and visualisation of multiple curves"

bibliography: bibliography.bib
csl: bioinfo.csl
format: docx

crossref:
  fig-title: Supplementary Figure
---

```{r R packages}
#| echo: false
#| message: false

library(dplyr)
library(stringr)
library(here)
library(tibble)
library(ggplot2)
library(gridExtra)
library(patchwork)
library(labelled)
library(gtsummary)
library(flextable)
library(webshot2)
library(lancer)
```

![*lancer* Workflow](images/README-Workflow.png){#fig-lancer-Workflow}

```{r Motivation, echo = FALSE}
#| echo: false

linear_data <- data.frame(
  conc_var = c(10, 25, 40, 50, 60,
               75, 80, 100, 125, 150),
  signal_var = c(25463, 63387, 90624, 131274, 138069,
                 205353, 202407, 260205, 292257, 367924)
)

saturation_regime_data <- data.frame(
  conc_var = c(10, 25, 40, 50, 60,
               75, 80, 100, 125, 150),
  signal_var = c(5192648, 16594991, 32507833, 46499896,
                 55388856, 62505210, 62778078, 72158161,
                 78044338, 86158414)
)

noise_regime_data <- data.frame(
  conc_var = c(10, 25, 40, 50, 60,
               75, 80, 100, 125, 150),
  signal_var = c(500, 903, 1267, 2031, 2100,
                 3563, 4500, 5300, 8500, 10430)
)

tabular_display <- tibble::tibble(
  Concentration = c(10, 25, 40, 50, 60,
                    75, 80, 100, 125, 150), 
  `Linear Curve` = c(25463, 63387, 90624, 131274, 138069,
                     205353, 202407, 260205, 292257, 367924),
  `Saturation Regime Curve` = c(5192648, 16594991, 32507833, 46499896,
                                55388856, 62505210, 62778078, 72158161,
                                78044338, 86158414), 
  `Noise Regime Curve` = c(500, 903, 1267, 2031, 2100,
                           3563, 4500, 5300, 8500, 10430)
)

concentration_table <- gridExtra::tableGrob(
  d = tabular_display, 
  rows = NULL,
  theme = gridExtra::ttheme_default(
    core=list(fg_params=list(hjust=1, x=0.9))
    )
  ) 
```

```{r create linear plot}
#| echo: false

# Get curve summary
statistical_summary <- lancer::summarise_curve_data(
  linear_data, 
  "conc_var", 
  "signal_var")

table <- lancer::plot_summary_table(statistical_summary)

# Model the data
linear_model <- lancer::create_linear_model(linear_data, 
                                            "conc_var", 
                                            "signal_var")

quad_model <- lancer::create_quad_model(linear_data, 
                                        "conc_var", 
                                        "signal_var")

curve <- seq(min(linear_data$conc_var, na.rm = TRUE),
             max(linear_data$conc_var, na.rm = TRUE),
             length.out = 15)

# Create the y values for the line
y_lin_predict <- stats::predict(linear_model,
                                tibble::tibble("conc_var" := curve))

y_quad_predict <- stats::predict(quad_model,
                                 tibble::tibble("conc_var" := curve))
reg_data <- data.frame(
  curve = curve,
  y_lin_predict = y_lin_predict,
  y_quad_predict = y_quad_predict
)

reg_col_vec <- c("Lin" = "black", "Quad" = "red")

linear_plot <- ggplot2::ggplot(linear_data) +
  ggplot2::aes(x = .data$conc_var,
               y = .data$signal_var
               ) +
  ggplot2::geom_point(size = 5, colour = "#746ab0") +
  ggplot2::geom_line(data = reg_data,
                     mapping = ggplot2::aes(x = curve, 
                                            y = y_lin_predict,
                                            colour = "Lin")) +
  ggplot2::geom_line(data = reg_data,
                     mapping = ggplot2::aes(x = curve, 
                                            y = y_quad_predict,
                                            colour = "Quad")) +
  ggplot2::scale_colour_manual(values = c(reg_col_vec),
                               labels = names(c(reg_col_vec)),
                               guide = ggplot2::guide_legend(override.aes = list(
                                 linetype = c(rep("solid", length(reg_col_vec))),
                                 shape = c(rep(NA, length(reg_col_vec))),
                                 colour = c(reg_col_vec)
                               ))) +
  ggplot2::theme(
    legend.title = ggplot2::element_blank(),
    legend.position = "top",
    axis.title.y = ggplot2::element_text(angle = 0,
                                         vjust = 1)
  ) +
  ggplot2::labs(title = "Linear Curve",
                x = "Concentration",
                y = "Signal")

linear_plot <- patchwork::wrap_plots(linear_plot, table, ncol = 2, nrow = 1)
```

```{r create saturation regime plot}
#| echo: false

# Get curve summary
statistical_summary <- lancer::summarise_curve_data(
  saturation_regime_data, 
  "conc_var", 
  "signal_var")

table <- lancer::plot_summary_table(statistical_summary)

# Model the data
linear_model <- lancer::create_linear_model(saturation_regime_data, 
                                            "conc_var", 
                                            "signal_var")

quad_model <- lancer::create_quad_model(saturation_regime_data, 
                                        "conc_var", 
                                        "signal_var")

curve <- seq(min(saturation_regime_data$conc_var, na.rm = TRUE),
             max(saturation_regime_data$conc_var, na.rm = TRUE),
             length.out = 15)

# Create the y values for the line
y_lin_predict <- stats::predict(linear_model,
                                tibble::tibble("conc_var" := curve))

y_quad_predict <- stats::predict(quad_model,
                                 tibble::tibble("conc_var" := curve))
reg_data <- data.frame(
  curve = curve,
  y_lin_predict = y_lin_predict,
  y_quad_predict = y_quad_predict
)

reg_col_vec <- c("Lin" = "black", "Quad" = "red")

saturation_regime_plot <- ggplot2::ggplot(saturation_regime_data) +
  ggplot2::aes(x = .data$conc_var,
               y = .data$signal_var) +
    ggplot2::geom_point(size = 5, colour = "#377eb8") +
  ggplot2::geom_line(data = reg_data,
                     mapping = ggplot2::aes(x = curve, 
                                            y = y_lin_predict,
                                            colour = "Lin")) +
  ggplot2::geom_line(data = reg_data,
                     mapping = ggplot2::aes(x = curve, 
                                            y = y_quad_predict,
                                            colour = "Quad")) +
  ggplot2::scale_colour_manual(values = c(reg_col_vec),
                               labels = names(c(reg_col_vec)),
                               guide = ggplot2::guide_legend(override.aes = list(
                                 linetype = c(rep("solid", length(reg_col_vec))),
                                 shape = c(rep(NA, length(reg_col_vec))),
                                 colour = c(reg_col_vec)
                               ))) +
  ggplot2::theme(
    legend.title = ggplot2::element_blank(),
    legend.position = "top",
    axis.title.y = ggplot2::element_text(angle = 0,
                                         vjust = 1)
  ) +
  ggplot2::labs(title = "Saturation Regime Curve",
                x = "Concentration",
                y = "Signal")

saturation_regime_plot <- patchwork::wrap_plots(saturation_regime_plot, 
                                                table, 
                                                ncol = 2, 
                                                nrow = 1)
```

```{r create noise regime plot}
#| echo: false

# Get curve summary
statistical_summary <- lancer::summarise_curve_data(
  noise_regime_data, 
  "conc_var", 
  "signal_var")

table <- lancer::plot_summary_table(statistical_summary)

# Model the data
linear_model <- lancer::create_linear_model(noise_regime_data, 
                                            "conc_var", 
                                            "signal_var")

quad_model <- lancer::create_quad_model(noise_regime_data, 
                                        "conc_var", 
                                        "signal_var")

curve <- seq(min(noise_regime_data$conc_var, na.rm = TRUE),
             max(noise_regime_data$conc_var, na.rm = TRUE),
             length.out = 15)

# Create the y values for the line
y_lin_predict <- stats::predict(linear_model,
                                tibble::tibble("conc_var" := curve))

y_quad_predict <- stats::predict(quad_model,
                                 tibble::tibble("conc_var" := curve))
reg_data <- data.frame(
  curve = curve,
  y_lin_predict = y_lin_predict,
  y_quad_predict = y_quad_predict
)

reg_col_vec <- c("Lin" = "black", "Quad" = "red")

noise_regime_plot <- ggplot2::ggplot(noise_regime_data) +
  ggplot2::aes(x = .data$conc_var,
               y = .data$signal_var) +
  ggplot2::geom_point(size = 5, colour = "#4daf4a") +
  ggplot2::geom_line(data = reg_data,
                     mapping = ggplot2::aes(x = curve, 
                                            y = y_lin_predict,
                                            colour = "Lin")) +
  ggplot2::geom_line(data = reg_data,
                     mapping = ggplot2::aes(x = curve, 
                                            y = y_quad_predict,
                                            colour = "Quad")) +
  ggplot2::scale_colour_manual(values = c(reg_col_vec),
                               labels = names(c(reg_col_vec)),
                               guide = ggplot2::guide_legend(override.aes = list(
                                 linetype = c(rep("solid", length(reg_col_vec))),
                                 shape = c(rep(NA, length(reg_col_vec))),
                                 colour = c(reg_col_vec)
                               ))) +
  ggplot2::theme(
    legend.title = ggplot2::element_blank(),
    legend.position = "top",
    axis.title.y = ggplot2::element_text(angle = 0,
                                         vjust = 1)) +
  ggplot2::labs(title = "Noise Regime Curve",
                x = "Concentration",
                y = "Signal")

noise_regime_plot <- patchwork::wrap_plots(noise_regime_plot, 
                                           table, 
                                           ncol = 2, 
                                           nrow = 1)
```

```{r ViewMotivationData1}
#| echo: false
#| label: fig-motivation
#| fig-cap: "Plots and statistical results of three curves: Linear Curve, Saturation Regime Curve and Noise Regime Curve."
#| fig-height: 10
#| fig-width: 14


patchwork::wrap_plots(
  concentration_table, 
  linear_plot, 
  saturation_regime_plot, 
  noise_regime_plot, 
  ncol = 2, 
  nrow = 2
)
```

```{r Load Simulated Data Results}
#| echo: false
saturation_regime_curve_summary <-
  readRDS(file = here::here(
    "Quarto_Simulation",
    "saturation_regime_curve_summary.rds")
)

noise_regime_curve_summary <-
  readRDS(file = here::here(
    "Quarto_Simulation",
    "noise_regime_curve_summary.rds")
)

linear_curve_summary <-
  readRDS(file = here::here(
    "Quarto_Simulation",
    "linear_curve_summary.rds")
)
```

```{r Combine Simulated Data Results}
#| echo: false
saturation_regime_curve_summary <- saturation_regime_curve_summary |> 
  dplyr::mutate(curve_group = "Saturation Regime")

noise_regime_curve_summary <- noise_regime_curve_summary |> 
  dplyr::mutate(curve_group = "Noise Regime")

linear_curve_summary <- linear_curve_summary |> 
  dplyr::mutate(curve_group = "Good Linearity")

combined_curve_summary <-
  dplyr::bind_rows(
    saturation_regime_curve_summary,
    noise_regime_curve_summary,
    linear_curve_summary
  ) 
```

```{r Data Wrangling for Simulation Results}
#| echo: false
combined_curve_summary <- 
  combined_curve_summary |> 
  dplyr::mutate(
    curve_group = factor(.data$curve_group,
                         levels = c("Good Linearity",
                                    "Saturation Regime",
                                    "Noise Regime")),
    pearson_group = dplyr::case_when(
      .data$r_corr >= 0.8 ~ "more than or\nequal to 0.8",
      .data$r_corr < 0.8 ~ "less than 0.8",
    ),
    wf2_group = factor(.data$wf2_group,
                         levels = c("Good Linearity",
                                    "Saturation Regime",
                                    "Noise Regime",
                                    "Poor Linearity"))
  ) |> 
  labelled::set_variable_labels(
    ID = "Unique Curve Identifier",
    curve_group = "Simulated Curve Group",
    wf1_group = "Workflow 1 Grouping",
    wf2_group = "Workflow 2 Grouping",
    pearson_group = "Pearson Correlation\nCoefficient Grouping",
    r_corr = "Pearson Correlation\nCoefficient",
    pra_linear = "Percent Residual\nAccuracy",
    mandel_p_val = "Mandel's Test p Value",
    concavity = "Concavity Of Fitted Quadratic Model",
    r2_linear = "Coefficient Of Determination",
    r2_adj_linear = "Adjusted Coefficient Of Determination",
    mandel_stats = "Test statistics from Mandel's Test"
  )

```

```{r}
#| echo: false
#| output: false
simulation_results <- combined_curve_summary |> 
  dplyr::select(c("curve_group", "wf2_group", 
                  "pearson_group"
                  # "r_corr", "pra_linear"
                  )
                ) |> 
  dplyr::relocate(c("pearson_group")) |> 
  gtsummary::tbl_summary(
    by = "curve_group",
    statistic = list(
      pearson_group ~ "{n}/{N} ({p}%)",
      wf2_group ~ "{n}/{N} ({p}%)"
    ),
    digits = list(
      wf2_group ~ c(0, 0, 1),
      pearson_group ~ c(0, 0, 1)
      #r_corr ~ c(2),
      #pra_linear ~ c(0)
      )
  ) |> 
  gtsummary::modify_header(
    gtsummary::all_stat_cols() ~ "**{level}**\nN = {n}"
    ) |> 
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Simulated Curve Type**"
    )


simulation_results |> 
  gtsummary::as_flex_table() |> 
  flextable::set_table_properties(width = 1, layout = "autofit") |>
  flextable::save_as_image(
    path = here::here("Manuscript",
                      "images",
                      "simulation_results.png"), 
    webshot = "webshot2")
```


![Simulation Results](images/simulation_results.png){#fig-Simulation}
