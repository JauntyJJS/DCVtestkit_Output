---
title: "Simulation"
author: "Jeremy Selva"
format:
  html:
    theme: 
      light: cerulean 
      dark: cyborg
    toc: true
    toc-depth: 3
    toc-location: left
    number-sections: false
    code-fold: show
    code-overflow: scroll
    code-copy: true
    code-tools: true
    code-link: true
    self-contained: false
    smooth-scroll: true
execute: 
  cache: false
---

# R Packages used

```{r R packages}
#| message: false

library(dplyr)
library(tidyr)
library(stringr)
library(tibble)
library(purrr)
library(ggplot2)
library(epifitter)
library(reactable)
library(deSolve)
library(lancer)
library(labelled)
library(gtsummary)
library(sessioninfo)
library(report)

set.seed(123)
```

```{r See packages info}
#| code-fold: true
r_package_table <- sessioninfo::package_info()
rownames(r_package_table) <- NULL

r_package_table |>
  dplyr::mutate(
    version = ifelse(is.na(r_package_table$loadedversion), 
                     r_package_table$ondiskversion, 
                     r_package_table$loadedversion)
  ) |> 
  dplyr::filter(.data$attached == TRUE) |> 
  dplyr::select(c("package", "version", 
                  "date", "source"
    )
  ) |> 
  reactable::reactable(
    columns = list(
      package = reactable::colDef(
        # Freeze first column
        sticky = "left",
        style = list(borderRight = "1px solid #eee"),
        headerStyle = list(borderRight = "1px solid #eee"))
  )
  )
```

# R Platform Information

```{r See session info}
#| code-fold: true

# Taken from https://github.com/r-lib/sessioninfo/issues/75
get_quarto_version <- function() {
  if (isNamespaceLoaded("quarto")) {
    path <- quarto::quarto_path()
    ver <- system("quarto -V", intern = TRUE)
    if (is.null(path)) {
      "NA (via quarto)"
    } else {
      paste0(ver, " @ ", path, "/ (via quarto)")
    }
  } else {
    path <- Sys.which("quarto")
    if (path == "") {
      "NA"
    } else {
      ver <- system("quarto -V", intern = TRUE)
      paste0(ver, " @ ", path)
    }
  }
}

r_platform_table <- sessioninfo::platform_info()
r_platform_table[["quarto"]] <- get_quarto_version()[1]

r_platform_table <- data.frame(
    setting = names(r_platform_table),
    value = unlist(r_platform_table,
                   use.names = FALSE),
    stringsAsFactors = FALSE
  )

r_platform_table |>
  reactable::reactable(
    defaultPageSize = 5
  )
```

# Simulation Functions

Here are the functions to simulate the different types of curves.

::: {.panel-tabset}

## Saturation Regime Curve

```{r Saturation Regime Curve Simulation Functions}

simulate_saturation_regime <- function(id) {
  
  mono_model <- epifitter::sim_monomolecular(
  N = 200,     # total time units 
  y0 = 0.01,   # initial inoculum
  dt = 30,     #  interval between assessments in time units
  r = 0.0175,  #  apparent infection rate
  alpha = 0.15,# level of noise
  n = 1        # number of replicates
  )

  saturation_regime_simulation <- tibble::tibble(
    x = mono_model$time,
    y = mono_model$random_y * sample(1:1000000, 1),
    `Sample Name` = as.character(mono_model$time))
  
  return(saturation_regime_simulation)
  
}

```

## Noise Regime Curve

```{r Noise Regime Curve Simulation Functions}

simulate_noise_regime <- function(id) {
  
  exp_model <- epifitter::sim_exponential(
    N = 200,    # total time units 
    y0 = 1,  # initial inoculum
    dt = 30,    #  interval between assessments in time units
    r = 0.02,  #  apparent infection rate
    alpha = 0.15, # level of noise
    n = 1       # number of replicates
    )

  noise_regime_simulation <- tibble::tibble(
    x = exp_model$time,
    y = exp_model$random_y * sample(1:1000000, 1),
    `Sample Name` = as.character(exp_model$time))
  
  return(noise_regime_simulation)
  
}

```

## Linear Curve

```{r Linear Curve Simulation Functions}

#diffeq model as function
model_constant = function(times, y, parms) {
  ## times = current times
  ## y = current state vector: in this case the 0th derivative, c(x)
  ## parms = vector of model parameters.
  with(as.list(c(y,parms)),{
  derivs = c( 
    dx = a
    )
  ## Return
  list(derivs)
})
}

sim_linear <- function(
    N,    # total time units
    y0,  # initial inoculum
    dt,    #  interval between assessments in time units
    r,  #  apparent infection rate
    alpha, # level of noise
    n       # number of replicates
) {
  
  time <- seq(0, N, by = dt)
  random_y <- numeric(length(time))
  y <- numeric(length(time))
  y[1] <- y0
  
  for (k in 1:(length(time) - 1)) {
    r[k + 1] <- r[k]
    InitCond <- c(y[k])
    steps <- seq(time[k], time[k + 1], by = dt)
    parms <- c(a = r[k])
    ode_logi <- deSolve::ode(InitCond, steps, model_constant, parms)
    y[k + 1] <- ode_logi[length(ode_logi[, 2]), 2]
  }
  
  data_uni <- matrix(0, ncol = 4, nrow = length(y))
  data_all <- matrix(0, ncol = 4, nrow = 0)
  
  for (j in 1:n) {
    for (i in 1:length(time)) {
      random_y[i] <- stats::rnorm(1, y[i], sd = alpha * y[i])
      }
    data_uni[, 1] <- rep(j, length(y))
    data_uni[, 2] <- time
    data_uni[, 3] <- y
    data_uni[, 4] <- random_y
    data_all <- rbind(data_all, data_uni)
    colnames(data_all) <-
      c("replicates", "time", "y", "random_y")
  }
  
  data_all = data.frame(data_all)
  return(data_all)

}

simulate_linear <- function(id) {

  linear_model <- sim_linear(
    N = 200,    # total time units 
    y0 = 1,  # initial inoculum
    dt = 30,    #  interval between assessments in time units
    r = 0.02,  #  apparent infection rate
    alpha = 0.1, # level of noise
    n = 1       # number of replicates
  )

  linear_simulation <- tibble::tibble(
    x = linear_model$time,
    y = linear_model$random_y * sample(1:1000000, 1),
    `Sample Name` = as.character(linear_model$time))
  
  return(linear_simulation)
  
}

```

:::

# Create Simulation Curve Data

We simulate $200$ curves (saturation regime, noise regime and linear) using $7$ points from $0$ to $200$ on the x-axis. A unique id is added for each simulated data.

::: {.panel-tabset}

## Saturation Regime Curve

```{r Create Simulated Data Saturation Regime}

nested_saturation_regime_simulated_database <-
  tibble::tibble(
    ID = paste("Saturation Regime", 
               stringr::str_pad(1:200, width = 3, pad = "0")),
    `Curve Batch Name` = "Saturation Regime"
    
  ) |> 
  dplyr::mutate(
    curve_data = purrr::map(
      .x = .data$ID,
      .f = simulate_saturation_regime
      )
  )
```

## Noise Regime Curve

```{r Create Simulated Data Noise Regime}

nested_noise_regime_simulated_database <-
  tibble::tibble(
    ID = paste("Noise Regime", 
               stringr::str_pad(1:200, width = 3, pad = "0")),
    `Curve Batch Name` = "Noise Regime"
    
  ) |> 
  dplyr::mutate(
    curve_data = purrr::map(
      .x = .data$ID,
      .f = simulate_noise_regime
      )
  )
```

## Linear Curve

```{r Create Simulated Data Linear}

nested_linear_simulated_database <-
  tibble::tibble(
    ID = paste("Linear", 
               stringr::str_pad(1:200, width = 3, pad = "0")),
    `Curve Batch Name` = "Linear"
    
  ) |> 
  dplyr::mutate(
    curve_data = purrr::map(
      .x = .data$ID,
      .f = simulate_linear
      )
  )
```

:::

# Unnest Simulated Curve Data

While nested curve data (having a column of data frames) is easier to view with a human eye, it can be hard to be read and processed by a computer. We need flattened the data frames back into columns. To do this, we use [`tidyr::unnest`](https://tidyr.tidyverse.org/reference/nest.html)  
## Saturation Regime Curve

```{r Nest Simulated Data Saturation Regime}
saturation_regime_simulated_database <-
  nested_saturation_regime_simulated_database |> 
  tidyr::unnest("curve_data")
```

## Noise Regime Curve

```{r Nest Simulated Data Noise Regime}
noise_regime_simulated_database <-
  nested_noise_regime_simulated_database |> 
  tidyr::unnest("curve_data")
```

## Linear Curve

```{r Nest Simulated Data Linear}
linear_simulated_database <-
  nested_linear_simulated_database |> 
  tidyr::unnest("curve_data")
```

# Save Simulated Data

We can now save the data as a csv and rds files.

## Saturation Regime Curve

```{r Save Simulated Data Saturated}
saveRDS(saturation_regime_simulated_database, 
        file = "saturation_regime_simulated_database.rds")

write.csv(x = saturation_regime_simulated_database,
          file = "saturation_regime_simulated_database.csv", 
          row.names = FALSE)
```

## Noise Regime Curve

```{r Save Simulated Data Noise Regime}
saveRDS(noise_regime_simulated_database, 
        file = "noise_regime_simulated_database.rds")

write.csv(x = noise_regime_simulated_database,
          file = "noise_regime_simulated_database.csv", 
          row.names = FALSE)
```

## Linear Curve

```{r Save Simulated Data Linear}
saveRDS(linear_simulated_database, 
        file = "linear_simulated_database.rds")

write.csv(x = linear_simulated_database,
          file = "linear_simulated_database.csv", 
          row.names = FALSE)
```

# Calculate Statistical Summary

We now calculate the statistical summary for each curve. In addition, we export statistical summary as a csv and rds files.

::: {.panel-tabset}

## Saturation Regime Curve

```{r curve statistical summary saturation regime}
#| message: false
saturation_regime_curve_summary <- 
  lancer::summarise_curve_table(
    curve_table = saturation_regime_simulated_database,
    grouping_variable = c("ID"),
    conc_var = "x",
    signal_var = "y") |> 
  lancer::evaluate_linearity(
    grouping_variable = c("ID")
  )
```

```{r save curve statistical summary saturation regime}
saveRDS(saturation_regime_curve_summary, 
        file = "saturation_regime_curve_summary.rds")

write.csv(x = saturation_regime_curve_summary,
          file = "saturation_regime_curve_summary.csv", 
          row.names = FALSE)
```

## Noise Regime Curve

```{r curve statistical summary noise regime}
#| message: false
noise_regime_curve_summary <- 
  lancer::summarise_curve_table(
    curve_table = noise_regime_simulated_database,
    grouping_variable = c("ID"),
    conc_var = "x",
    signal_var = "y") |> 
  lancer::evaluate_linearity(
    grouping_variable = c("ID")
  )

```

```{r save curve statistical summary lod}
saveRDS(noise_regime_curve_summary, 
        file = "noise_regime_curve_summary.rds")

write.csv(x = noise_regime_curve_summary,
          file = "noise_regime_curve_summary.csv", 
          row.names = FALSE)
```

## Linear Curve

```{r curve statistical summary linear}
#| message: false
linear_curve_summary <-
  lancer::summarise_curve_table(
    curve_table = linear_simulated_database,
    grouping_variable = c("ID"),
    conc_var = "x",
    signal_var = "y") |> 
  lancer::evaluate_linearity(
    grouping_variable = c("ID")
  )

```

```{r save curve statistical summary linear}
saveRDS(linear_curve_summary, 
        file = "linear_curve_summary.rds")

write.csv(x = linear_curve_summary,
          file = "linear_curve_summary.csv", 
          row.names = FALSE)
```

:::

# View Simulation Curve Data and Statistical Summary

We use [`reactable::reactable`](https://glin.github.io/reactable/reference/reactable.html) to print the simulated data and statistical summary.

## Saturation Regime Curve

```{r Print Simulated Data Saturation Regime}
#| layout-ncol: 1

nested_saturation_regime_simulated_database |> 
  reactable::reactable(
    defaultColDef = reactable::colDef(minWidth = 200),
    defaultPageSize = 5,
    columns = list(
      ID = reactable::colDef(
        # Freeze first column
        sticky = "left",
        style = list(borderRight = "1px solid #eee"),
        headerStyle = list(borderRight = "1px solid #eee"),
        minWidth = 200),
      curve_data = reactable::colDef(
        details = function(index) {
          filtered_data <- nested_saturation_regime_simulated_database[["curve_data"]][index][[1]]
          htmltools::div(style = "padding: 1rem",
                         reactable::reactable(
                           data = filtered_data,
                           defaultPageSize = 10,
                           defaultColDef = reactable::colDef(minWidth = 200),
                           columns = list(Sample_Name = reactable::colDef(minWidth = 200)),
                           outlined = TRUE,
                           highlight = TRUE)
                       )
      }
    )
  )
)

saturation_regime_curve_summary |> 
  reactable::reactable(
    defaultColDef = reactable::colDef(minWidth = 200),
    defaultPageSize = 5,
    columns = list(
      ID = reactable::colDef(
      # Freeze first column
      sticky = "left",
      style = list(borderRight = "1px solid #eee"),
      headerStyle = list(borderRight = "1px solid #eee"),
      minWidth = 200)
    )
)
```

## Noise Regime Curve

```{r Print Simulated Data Noise Regime}
#| layout-ncol: 1

nested_noise_regime_simulated_database |> 
  reactable::reactable(
    defaultColDef = reactable::colDef(minWidth = 200),
    defaultPageSize = 5,
    columns = list(
      ID = reactable::colDef(
        # Freeze first column
        sticky = "left",
        style = list(borderRight = "1px solid #eee"),
        headerStyle = list(borderRight = "1px solid #eee"),
        minWidth = 200),
      curve_data = reactable::colDef(
        details = function(index) {
          filtered_data <- nested_noise_regime_simulated_database[["curve_data"]][index][[1]]
          htmltools::div(style = "padding: 1rem",
                         reactable::reactable(
                           data = filtered_data,
                           defaultPageSize = 10,
                           defaultColDef = reactable::colDef(minWidth = 200),
                           columns = list(Sample_Name = reactable::colDef(minWidth = 200)),
                           outlined = TRUE,
                           highlight = TRUE)
                       )
      }
    )
  )

)

noise_regime_curve_summary |> 
  reactable::reactable(
    defaultColDef = reactable::colDef(minWidth = 200),
    defaultPageSize = 5,
    columns = list(
      ID = reactable::colDef(
      # Freeze first column
      sticky = "left",
      style = list(borderRight = "1px solid #eee"),
      headerStyle = list(borderRight = "1px solid #eee"),
      minWidth = 200)
    )
)
```

## Linear Curve

```{r Print Simulated Data Linear}
#| layout-ncol: 1

nested_linear_simulated_database |>
  reactable::reactable(
    defaultColDef = reactable::colDef(minWidth = 200),
    defaultPageSize = 5,
    columns = list(
      ID = reactable::colDef(
        # Freeze first column
        sticky = "left",
        style = list(borderRight = "1px solid #eee"),
        headerStyle = list(borderRight = "1px solid #eee"),
        minWidth = 200),  
      curve_data = reactable::colDef(
        details = function(index) {
          filtered_data <- nested_linear_simulated_database[["curve_data"]][index][[1]]
          htmltools::div(style = "padding: 1rem",
                         reactable::reactable(
                           data = filtered_data,
                           defaultPageSize = 10,
                           defaultColDef = reactable::colDef(minWidth = 200),
                           columns = list(Sample_Name = reactable::colDef(minWidth = 200)),
                           outlined = TRUE,
                           highlight = TRUE)
                       )
      }
    )
  )

)

linear_curve_summary |> 
  reactable::reactable(
    defaultColDef = reactable::colDef(minWidth = 200),
    defaultPageSize = 5,
    columns = list(
      ID = reactable::colDef(
      # Freeze first column
      sticky = "left",
      style = list(borderRight = "1px solid #eee"),
      headerStyle = list(borderRight = "1px solid #eee"),
      minWidth = 200)
    )
)
```

# Report Workflow $2$ Results

We combined the three summary results together

```{r Combine Simulated Data Results}

saturation_regime_curve_summary <- 
  saturation_regime_curve_summary |> 
  dplyr::mutate(curve_group = "Saturation Regime")

noise_regime_curve_summary <- noise_regime_curve_summary |> 
  dplyr::mutate(curve_group = "Noise Regime")

linear_curve_summary <- linear_curve_summary |> 
  dplyr::mutate(curve_group = "Good Linearity")

combined_curve_summary <-
  dplyr::bind_rows(
    saturation_regime_curve_summary,
    noise_regime_curve_summary,
    linear_curve_summary
  ) 
```

Perform some data wrangling to summarise the results later. A benchmark workflow using only Pearson Correlation Coefficient with a cut off value of $0.8$ is used to compare with Workflow $2$.

```{r Data Wrangling for Simulation Results}

combined_curve_summary <- 
  combined_curve_summary |> 
  dplyr::mutate(
    curve_group = factor(.data$curve_group,
                         levels = c("Good Linearity",
                                    "Saturation Regime",
                                    "Noise Regime")),
    pearson_group = dplyr::case_when(
      .data$r_corr >= 0.8 ~ "more than or\nequal to 0.8",
      .data$r_corr < 0.8 ~ "less than 0.8",
    ),
    # wf2_group = stringr::str_replace(
    #   string = .data$wf2_group,
    #   pattern = "Noise Regime",
    #   replacement = "Noise Regime"
    # ),
    wf2_group = factor(.data$wf2_group,
                       levels = c("Good Linearity",
                                  "Saturation Regime",
                                  "Noise Regime",
                                  "Poor Linearity"))
  ) |> 
  labelled::set_variable_labels(
    ID = "Unique Curve Identifier",
    curve_group = "Simulated Curve Group",
    wf1_group = "Workflow 1 Grouping",
    wf2_group = "Workflow 2 Grouping",
    pearson_group = "Pearson Correlation\nCoefficient Grouping",
    r_corr = "Pearson Correlation\nCoefficient",
    pra_linear = "Percent Residual\nAccuracy",
    mandel_p_val = "Mandel's Test p Value",
    concavity = "Concavity Of Fitted Quadratic Model",
    r2_linear = "Coefficient Of Determination",
    r2_adj_linear = "Adjusted Coefficient Of Determination",
    mandel_stats = "Test statistics from Mandel's Test"
  )

```

```{r Worflow 2 vs Benchmark results}
#| column: screen-inset-right
simulation_results <- combined_curve_summary |> 
  dplyr::select(c("curve_group", "wf2_group", 
                  "pearson_group"
                  # "r_corr", "pra_linear"
                  )
                ) |> 
  dplyr::relocate(c("pearson_group")) |> 
  gtsummary::tbl_summary(
    by = "curve_group",
    statistic = list(
      pearson_group ~ "{n}/{N} ({p}%)",
      wf2_group ~ "{n}/{N} ({p}%)"
    ),
    digits = list(
      wf2_group ~ c(0, 0, 1),
      pearson_group ~ c(0, 0, 1)
      #r_corr ~ c(2),
      #pra_linear ~ c(0)
      )
  ) |> 
  gtsummary::modify_header(
    gtsummary::all_stat_cols() ~ "**{level}**\nN = {n}"
    ) |> 
  gtsummary::modify_spanning_header(
    gtsummary::all_stat_cols() ~ "**Simulated Curve Type**"
    )

simulation_results
```

Results showed that Workflow $2$ is able to identify the saturated and limit of detection curves better than the benchmark workflow. On the other hand, while Workflow $2$ is able to identify less linear curves than the benchmark workflow, it gives a comparable score of `r inline_text(simulation_results, variable = wf2_group, level = "Good Linearity", column = "Good Linearity")`

# Report Plots As pdf Files

::: {.panel-tabset}

## Saturation Regime Curve

```{r plots as pdf saturation regime}
saturation_regime_ggplot_table <- lancer::add_ggplot_panel(
  curve_table = saturation_regime_simulated_database,
  curve_summary = saturation_regime_curve_summary,
  grouping_variable = c("ID"),
  curve_batch_var = "Curve Batch Name",
  conc_var = "x",
  signal_var = "y",
  conc_var_units = ""
  )

saturation_regime_ggplot_list <-
  saturation_regime_ggplot_table$panel

lancer::view_ggplot_pdf(
  ggplot_list = saturation_regime_ggplot_list,
  filename = "curve_plot_saturation_regime.pdf",
  ncol_per_page = 2,
  nrow_per_page = 2)

```

## Noise Regime Curve

```{r plots as pdf noise regime}
noise_regime_ggplot_table <- lancer::add_ggplot_panel(
  curve_table = noise_regime_simulated_database,
  curve_summary = noise_regime_curve_summary,
  grouping_variable = c("ID"),
  curve_batch_var = "Curve Batch Name",
  conc_var = "x",
  signal_var = "y",
  conc_var_units = ""
  )

noise_regime_ggplot_list <- noise_regime_ggplot_table$panel

lancer::view_ggplot_pdf(
  ggplot_list = noise_regime_ggplot_list,
  filename = "curve_plot_noise_regime.pdf",
  ncol_per_page = 2,
  nrow_per_page = 2)

```

## Linear Curve

```{r plots as pdf linear}
linear_ggplot_table <- lancer::add_ggplot_panel(
  curve_table = linear_simulated_database,
  curve_summary = linear_curve_summary,
  grouping_variable = c("ID"),
  curve_batch_var = "Curve Batch Name",
  conc_var = "x",
  signal_var = "y",
  conc_var_units = ""
  )

linear_ggplot_list <- linear_ggplot_table$panel

lancer::view_ggplot_pdf(
  ggplot_list = linear_ggplot_list,
  filename = "curve_plot_linear.pdf",
  ncol_per_page = 2,
  nrow_per_page = 2)

```

:::

# Report plots as trellis

## Saturation Regime Curve

```{r plots as trellis saturation regime}
#| column: screen-inset-right

saturation_regime_trellis_table <- lancer::add_plotly_panel(
  curve_table = saturation_regime_simulated_database,
  curve_summary = saturation_regime_curve_summary,
  grouping_variable = c("ID"),
  sample_name_var = "Sample Name",
  curve_batch_var = "Curve Batch Name",
  curve_batch_col = c(
    "#377eb8"),
  conc_var = "x",
  conc_var_units = "",
  conc_var_interval = 50,
  signal_var = "y",
  have_plot_title = FALSE
) |> 
  lancer::convert_to_cog(
    grouping_variable = "ID",
    panel_variable = "panel",
    col_name_vec = "col_name_vec",
    desc_vec = "desc_vec",
    type_vec = "type_vec"
  )

lancer::view_trellis_html(
  trellis_table = saturation_regime_trellis_table,
  grouping_variable = c("ID"),
  trellis_report_name = "Curve_Plot_Saturation_Regime",
  trellis_report_folder = "Curve_Saturation_Regime_Folder",
  panel_variable = "panel"
)
```

## Noise Regime Curve

```{r plots as trellis lod}
#| column: screen-inset-right

noise_regime_trellis_table <- lancer::add_plotly_panel(
  curve_table = noise_regime_simulated_database,
  curve_summary = noise_regime_curve_summary,
  grouping_variable = c("ID"),
  sample_name_var = "Sample Name",
  curve_batch_var = "Curve Batch Name",
  curve_batch_col = c(
    "#377eb8"),
  conc_var = "x",
  conc_var_units = "",
  conc_var_interval = 50,
  signal_var = "y",
  have_plot_title = FALSE
) |> 
  lancer::convert_to_cog(
    grouping_variable = "ID",
    panel_variable = "panel",
    col_name_vec = "col_name_vec",
    desc_vec = "desc_vec",
    type_vec = "type_vec"
  )

lancer::view_trellis_html(
  trellis_table = noise_regime_trellis_table,
  grouping_variable = c("ID"),
  trellis_report_name = "Curve_Plot_Noise_Regime",
  trellis_report_folder = "Curve_Noise_Regime_Folder",
  panel_variable = "panel"
)
```

## Linear Curve

```{r plots as trellis linear}
#| column: screen-inset-right
 
linear_trellis_table <- lancer::add_plotly_panel(
  curve_table = linear_simulated_database,
  curve_summary = linear_curve_summary,
  grouping_variable = c("ID"),
  sample_name_var = "Sample Name",
  curve_batch_var = "Curve Batch Name",
  curve_batch_col = c(
    "#377eb8"),
  conc_var = "x",
  conc_var_units = "",
  conc_var_interval = 50,
  signal_var = "y",
  have_plot_title = FALSE
) |> 
  lancer::convert_to_cog(
    grouping_variable = "ID",
    panel_variable = "panel",
    col_name_vec = "col_name_vec",
    desc_vec = "desc_vec",
    type_vec = "type_vec"
  )

lancer::view_trellis_html(
  trellis_table = linear_trellis_table,
  grouping_variable = c("ID"),
  trellis_report_name = "Curve_Plot_Linear",
  trellis_report_folder = "Curve_Linear_Folder",
  panel_variable = "panel"
)
```

# R Package Reference

```{r package references}
#| code-fold: true
#| output: asis

report::cite_packages() |> 
  suppressWarnings()
```
